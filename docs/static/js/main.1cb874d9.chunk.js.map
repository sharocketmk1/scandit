{"version":3,"sources":["BarcodePicker/BarcodePicker.js","App.js","serviceWorker.js","index.js"],"names":["configure","engineLocation","preloadEngineLibrary","preloadCameras","catch","error","alert","style","position","top","bottom","left","right","margin","maxWidth","maxHeight","BarcodePicker","props","ref","React","createRef","ScanditSDKBarcodePicker","create","this","current","then","barcodePicker","onScan","on","onError","destroy","prevProps","JSON","stringify","scanSettings","applyScanSettings","visible","setVisible","Component","App","useState","barcode","console","log","className","playSoundOnScan","vibrateOnScan","ScanSettings","enabledSymbologies","codeDuplicateFilter","scanResult","document","getElementById","innerHTML","barcodes","reduce","string","Barcode","Symbology","toHumanizedName","symbology","data","message","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAIAA,oBAAU,+rCAAgsC,CACxsCC,eAAgB,IAChBC,sBAAsB,EACtBC,gBAAgB,IACfC,OAAM,SAAAC,GACPC,MAAMD,MAGR,IAAME,EAAQ,CACZC,SAAU,WACVC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,OACRC,SAAU,SACVC,UAAW,OA8DEC,E,YAtCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,IAAMC,IAAMC,YAFA,E,iFAKE,IAAD,OAClBC,gBAAwBC,OAAOC,KAAKL,IAAIM,QAASD,KAAKN,OAAOQ,MAAK,SAAAC,GAChE,EAAKA,cAAgBA,EACI,MAArB,EAAKT,MAAMU,QACbD,EAAcE,GAAG,OAAQ,EAAKX,MAAMU,QAEZ,MAAtB,EAAKV,MAAMY,SACbH,EAAcE,GAAG,YAAa,EAAKX,MAAMY,c,6CAMnB,MAAtBN,KAAKG,eACPH,KAAKG,cAAcI,Y,yCAIJC,GACbC,KAAKC,UAAUF,EAAUG,gBAAkBF,KAAKC,UAAUV,KAAKN,MAAMiB,eACvEX,KAAKG,cAAcS,kBAAkBZ,KAAKN,MAAMiB,cAG9CH,EAAUK,UAAYb,KAAKN,MAAMmB,SACnCb,KAAKG,cAAcW,WAAWd,KAAKN,MAAMmB,W,+BAK3C,OAAO,yBAAKlB,IAAKK,KAAKL,IAAKX,MAAOA,Q,GAvDV+B,aCgBbC,EAlCH,SAACtB,GAAW,IAAD,EACSuB,mBAASvB,EAAMwB,SADxB,mBACdA,EADc,UAIrB,OAFAC,QAAQC,IAAI,UAAWF,GAGrB,yBAAKG,UAAU,OACb,uCAAaH,GACb,kBAAC,EAAD,CACEI,iBAAiB,EACjBC,eAAe,EACfZ,aACE,IAAIa,eAAa,CACfC,mBAAoB,CAAC,KAAM,OAAQ,QAAS,OAAQ,OAAQ,UAAW,SAAU,SAAU,OAC3FC,oBAAqB,MAGzBtB,OAAQ,SAAAuB,GACNR,QAAQC,IAAI,aAAcO,GAC1BC,SAASC,eAAe,0BAA0BC,UAAYH,EAAWI,SAASC,QAAO,SACvFC,EACAf,GAEA,OAAOe,EAASC,UAAQC,UAAUC,gBAAgBlB,EAAQmB,WAAa,KAAOnB,EAAQoB,KAAO,SAE7F,KAEJhC,QAAS,SAAAxB,GACPqC,QAAQrC,MAAMA,EAAMyD,cCpBVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD6H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.1cb874d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { configure, BarcodePicker as ScanditSDKBarcodePicker } from \"scandit-sdk\";\n\nconfigure(\"Af89/VdwSWUnBPcwliDrt3INUu9TRPN5iyaao0p7uap/XRxjXWd1VSB3PC5mejRobWgZwL4/AUE6fpoegzGK6URbkBR4SI+G5CvLmKkuLFNXGY0FKGyhJ51l+KqbToGI3V461ztMSpZqbtfCoS/omnJ79qrKL4+5v1+HXmAyA44KU3n2QF9j3dRDxumCQBB4xkPBQQloZqUMdb1U01l/Bh5cs6P9Xtl+6Vdu5y1g/wzZRmVqd3YjTihYSGj+fDufKW6nrxNQ9hXpW0Vd+2r5/eht/5ciRm3DQQpOl/9I2Nj1IH/NpUeY1WVVexVLVHuPrHaepmdctUyFU/lLHGmx4tlYf4RkS68XpFNsLZBLd6E1cZWg/FYSB1JXs/BXSwwWd1ftDmBxDFiwVo2El0xTvOAvRznlXfzwPHiarWZ6FUr6Wa89mGuCvGd3s1O2WXtom15dLT9t1LisOiWqzkvoBNJUTs/2USs4IGGEWMN+Oe43bcq1m15fbd8Qv4zjZJZ4CT75S4IWUurdFHy63Lv3JlYCsfxJBIkFJj+t88yyeCU9++tFfW6hRJSFfM6B9gsdxB296kwj8LQbHXFytIy566kaaUqDfp1OzpdFW5s8S947LHME5vkz2i0T7duiBhXaXOy+DlZMDW59OFqHmN4rcraODAovyP6Y0WEFXqjHHpW4jbCbL3J5x1ZsnJFcpeh2seGMtJMAGHILnqWHWG/9QCFKSq3D1JOonbJQouMTn5IuvoKfSPUQH5ZFmSopeuAChn+J8AJ8k+i7R74Sx7OeMqKnv/uyEmNvmk5Lc0Y40E1NR/Yw8nfCGI8W81+Q+jFChZnln+aG3gPrSuzKXY+Lm5uSdhV8eG7m3unb81mpqyJeTG2YnOfv4ErffctwcnwV47jCBVatChvT97lKMrIAQQNBU85xo4c4vmaouZ4zjjpbfFuMqEwwQqdTYB8uJt4+AakEQht6sajnHQ3bYDgIW1ggK/Jo8MIcDWKjYVA8ebReI8FClfOo54DZrnHZgCT9pfgqP1IHH+60Fvsb2qQ42TTOcHCSVH/je+VZZgoJRdk6QxmpB/7dA4sPeM/lVB5tJCokcD3CmZ3dq1lcKqetDvZwh/y47y98zgYftFcRyIMGoxbZo9Cgvg5yspfAwNh2HeS57qCZ3PoEumEIc7zmYpr5YtC3FrsRXlHIC2mBItVENJZoy68P1ppWcD0=\", {\n  engineLocation: \"/\",\n  preloadEngineLibrary: true,\n  preloadCameras: true\n}).catch(error => {\n  alert(error);\n});\n\nconst style = {\n  position: \"absolute\",\n  top: \"0\",\n  bottom: \"0\",\n  left: \"0\",\n  right: \"0\",\n  margin: \"auto\",\n  maxWidth: \"1280px\",\n  maxHeight: \"80%\"\n};\n\nclass BarcodePicker extends Component {\n  static propTypes = {\n    visible: PropTypes.bool,\n    playSoundOnScan: PropTypes.bool,\n    vibrateOnScan: PropTypes.bool,\n    scanningPaused: PropTypes.bool,\n    guiStyle: PropTypes.string,\n    videoFit: PropTypes.string,\n    scanSettings: PropTypes.object,\n    enableCameraSwitcher: PropTypes.bool,\n    enableTorchToggle: PropTypes.bool,\n    enableTapToFocus: PropTypes.bool,\n    enablePinchToZoom: PropTypes.bool,\n    accessCamera: PropTypes.bool,\n    camera: PropTypes.object,\n    cameraSettings: PropTypes.object,\n    targetScanningFPS: PropTypes.number,\n    onScan: PropTypes.func,\n    onError: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    ScanditSDKBarcodePicker.create(this.ref.current, this.props).then(barcodePicker => {\n      this.barcodePicker = barcodePicker;\n      if (this.props.onScan != null) {\n        barcodePicker.on(\"scan\", this.props.onScan);\n      }\n      if (this.props.onError != null) {\n        barcodePicker.on(\"scanError\", this.props.onError);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.barcodePicker != null) {\n      this.barcodePicker.destroy();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(prevProps.scanSettings) !== JSON.stringify(this.props.scanSettings)) {\n      this.barcodePicker.applyScanSettings(this.props.scanSettings);\n    }\n\n    if (prevProps.visible !== this.props.visible) {\n      this.barcodePicker.setVisible(this.props.visible);\n    }\n  }\n\n  render() {\n    return <div ref={this.ref} style={style} />;\n  }\n}\n\nexport default BarcodePicker;\n","import React, { useState } from \"react\";\nimport { ScanSettings, Barcode } from \"scandit-sdk\";\n\nimport BarcodePicker from \"./BarcodePicker/BarcodePicker\";\n\nconst App = (props) => {\n  const [barcode, setBarcode] = useState(props.barcode);\n  console.log('barcode', barcode);\n\n  return (\n    <div className=\"App\">\n      <p>Barcode: {barcode}</p>\n      <BarcodePicker\n        playSoundOnScan={true}\n        vibrateOnScan={true}\n        scanSettings={\n          new ScanSettings({\n            enabledSymbologies: [\"qr\", \"ean8\", \"ean13\", \"upca\", \"upce\", \"code128\", \"code39\", \"code93\", \"itf\"],\n            codeDuplicateFilter: 1000\n          })\n        }\n        onScan={scanResult => {\n          console.log('scanResult', scanResult);\n          document.getElementById(\"scandit-barcode-result\").innerHTML = scanResult.barcodes.reduce(function (\n            string,\n            barcode\n          ) {\n            return string + Barcode.Symbology.toHumanizedName(barcode.symbology) + \": \" + barcode.data + \"<br>\";\n          },\n            \"\");\n        }}\n        onError={error => {\n          console.error(error.message);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}